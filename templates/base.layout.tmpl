{{define "base"}}
<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>Reservation</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.1.4/dist/css/datepicker.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
</head>

<body>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item active">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/about">About</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Rooms
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                        <a class="dropdown-item" href="/generals-quarters">General's Quarters</a>
                        <a class="dropdown-item" href="/majors-suite">Major's Suite</a>
                    </div>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/search-availability">Book Now</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/contact">Contact</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

{{block "content" .}}{{end}}

<footer class="my-footer">
    <div class="row">
        <div class="col">
            left
        </div>
        <div class="col">
            center
        </div>
        <div class="col">
            right
        </div>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.1.4/dist/js/datepicker-full.min.js"></script>
<script src="https://unpkg.com/notie"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    (function () {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        let forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {

                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })();

    function notify(msg, msgType) {
        notie.alert({
            text: msg,
            type: msgType,
        });
    }

    {{with .Error}}
    notify("{{.}}", "error");
    {{end}}

    {{with .Flash}}
    notify("{{.}}", "success");
    {{end}}

    {{with .Warning}}
    notify("{{.}}", "warning");
    {{end}}

    let attention = Prompt();
    let checkAvailabilityButton = document.getElementById('check-availability-button');

    if (checkAvailabilityButton) {
        checkAvailabilityButton.addEventListener('click', function () {
            const html = `
<div class="container">
    <form id="check-availability" action="" method="POST" novalidate class="needs-validation">
        <div class="row my-3" id="reservation-dates-modal">
            <div class="col-sm-6">
                <label for="startDateModal" class="form-label">Starting date</label>
                <input disabled required type="text" name="start_date" class="form-control" id="startDateModal" placeholder="Arrival">
            </div>
            <div class="col-sm-6">
                <label for="endDateModal" class="form-label">Ending date</label>
                <input disabled required type="text" name="end_date" class="form-control" id="endDateModal" placeholder="Departure">
            </div>
        </div>
    </form>
</div>
`;
            const preConfirm = () => {
                    return [
                        document.getElementById('startDateModal').value,
                        document.getElementById('endDateModal').value,
                    ]
                },
                willOpen = () => {
                    const reservationDatesModal = document.getElementById('reservation-dates-modal');
                    const dateRangePicker = new DateRangePicker(reservationDatesModal, {
                        format: 'yyyy-mm-dd',
                    });
                },
                didOpen = () => {
                    document.getElementById('startDateModal').removeAttribute('disabled');
                    document.getElementById('endDateModal').removeAttribute('disabled');
                },
                callback = (result) => {
                    console.log(result);

                    let form = document.getElementById('check-availability');
                    let formData = new FormData(form);
                    formData.append('csrf_token', "{{.CsrfToken}}");

                    fetch('/search-availability-json', {
                        method: 'post',
                        body: formData,
                    })
                        .then(response => response.json())
                        .then(data => {
                            console.log(data);
                        });
                };

            attention.custom({
                title: 'Choose your dates',
                msg: html,
                preConfirm: preConfirm,
                willOpen: willOpen,
                didOpen: didOpen,
                callback: callback,
            });
        });
    }

    function Prompt() {
        let toast = function (c) {
            const {
                msg = '',
                icon = 'success',
                position = 'top-end',
            } = c;

            const Toast = Swal.mixin({
                toast: true,
                title: msg,
                position: position,
                icon: icon,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({});
        }

        let success = function (c) {
            const {
                msg = '',
                title = '',
                footer = '',
            } = c;

            Swal.fire({
                icon: 'success',
                title: title,
                text: msg,
                footer: footer,
            })
        }

        let error = function (c) {
            const {
                msg = '',
                title = '',
                footer = '',
            } = c;

            Swal.fire({
                icon: 'error',
                title: title,
                text: msg,
                footer: footer,
            })
        }

        let custom = async function custom(c) {
            const {
                title = '',
                msg = '',
                preConfirm = () => {
                },
                willOpen = () => {
                },
                didOpen = () => {
                },
                callback = undefined,
            } = c;

            const {value: result} = await Swal.fire({
                title: title,
                html: msg,
                backdrop: false,
                focusConfirm: false,
                showCancelButton: true,
                preConfirm: preConfirm,
                willOpen: willOpen,
                didOpen: didOpen,
            });

            if (result && callback !== undefined) {
                callback(result);
            }
        }

        return {
            toast: toast,
            success: success,
            error: error,
            custom: custom,
        }
    }
</script>

{{block "js" .}}{{end}}

</body>
</html>
{{end}}